self()
spawn(fn ->
  :timer.sleep(2000)
  IO.puts "I'm running in process #{inspect(self())}"
end)
x = 4
spawn(fn ->
  x = x * x
  IO.puts "The number squared is #{x}"
end)
x
send(self(), "hey, I'm messaging myself")
receive do
  message -> IO.puts message
end
send(self(), {:result, 2+2-1})
receive do
  {:result, result} -> IO.puts "The result is #{result}"
end
send(self(), {:other_result, 3+3-2})
receive do
  {:result, result} -> IO.puts "The result is #{result}"
  _ -> {:error, :unexpected_message}
end
receive do
  message -> IO.puts "Message is #{message}"
end
receive do
  message -> IO.puts "Message is #{message}"
after
  2000 -> IO.puts "Timed out. No message received in 2 seconds."
end
long_running_computation = fn number ->
  :timer.sleep(500)
  "result for #{number}"
end
computation_results = fn ->
  (1..50)
  |> Enum.map(long_running_computation)
end
:timer.tc(computation_results, [])
fetch_result = fn ->
  receive do
    {:computation_result, result} -> result
    _ -> {:error, :unexpected_message}
  end
end
me = self()
concurrent_computation_results = fn ->
  (1..50)
  |> Enum.map(&(spawn(fn -> send(me, {:computation_result, long_running_computation.(&1)}) end)))
  |> Enum.map(fn _ -> fetch_result.() end)
end
:timer.tc(concurrent_computation_results, [])
cache_worker_pid = CacheWorker.init("some binary content")
send(cache_worker_pid, {:get_content, self()})
send(cache_worker_pid, :refresh)
send(cache_worker_pid, {:get_content, self()})
flush
send(cache_worker_pid, :other_message)
cache_worker_pid = CacheWorker.init("some binary content")
CacheWorker.get_content(cache_worker_pid)
CacheWorker.refresh(cache_worker_pid)
cache_worker_pid = CacheWorker.init("some binary content")
CacheWorker.get_content(cache_worker_pid)
cache_worker_pid = CacheWorker.init("some other binary content")
CacheWorker.get_content(cache_worker_pid)
Process.exit(cache_worker_pid, :kill)
Process.flag(:trap_exit, true)
cache_worker_pid = CacheWorker.init("some binary content")
CacheWorker.get_content(cache_worker_pid)
Process.exit(cache_worker_pid, :kill)
flush
cache_worker_pid = CacheWorker.init("some binary content")
CacheWorker.get_content(cache_worker_pid)
monitor_reference = Process.monitor(cache_worker_pid)
flush
c("encryption.ex")
c("upload_pipeline_supervisor.ex")
{:ok, supervisor_pid} = ElixirDrip.Storage.Supervisors.Upload.Pipeline.start_link()
send(pid(0, 98, 0), "some message")
Process.exit(pid(0, 98, 0), :kill)
send(pid(0, 102, 0), "some message")
c("cache_worker_under_supervisor.ex")
c("cache_supervisor.ex")
ElixirDrip.Storage.Supervisors.CacheSupervisor.start_link()
ElixirDrip.Storage.Supervisors.CacheSupervisor.put("abc", "def")
ElixirDrip.Storage.Supervisors.CacheSupervisor.get("abc")
ElixirDrip.Storage.Supervisors.CacheSupervisor.get("xyz")
ElixirDrip.Storage.Supervisors.CacheSupervisor.get("abc")
ElixirDrip.Storage.Supervisors.CacheSupervisor.put("abc", "def")
Process.exit(pid(0, 104, 0), :kill)
ElixirDrip.Storage.Supervisors.CacheSupervisor.get("abc")
